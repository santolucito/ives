> {-# LANGUAGE DeriveDataTypeable #-}

> module TypeSigParser where

> import Data.Data --TH uses this, but i dont know how to use it yet
> import System.IO
> import Control.Monad
> import Text.ParserCombinators.Parsec
> import Text.ParserCombinators.Parsec.Expr
> import Text.ParserCombinators.Parsec.Language
> import qualified Text.ParserCombinators.Parsec.Token as Token

this is the parser for haskell types.
Probably could get this direct from ghc API somehow, but good practice to write a parser in haskell.
Base off the tutorial here https://wiki.haskell.org/Parsing_a_simple_imperative_language

The most complicated thing we parse for now is something like
f :: Con a, Con' b => (a -> a) -> [(b,c)] -> T a b

Starting with the grammar of type from template haskell.
Some info is missing (why isnt ListT instead ListT Type), 
and a bunch is extra for us (Kinds,TyVarBndr..)

fullSig ::= name :: sig
sig ::= cxt => ty

cxt ::= pred | pred , pred
pred ::= name ty | ty ~ ty

ty ::= ty
     | var
     | (tup)
     | [ty]
     | ty -> ty
     | const ty ty
     | (ty)

tup ::= var , var | var , tup

> data FullSig = FSig Name TypeSig
> data Sig = S Cxt Type
> type Name = String

> type Cxt = [Pred]                 -- ^ @(Eq a, Ord b)@
> data Pred = ClassP Name [Type]    -- ^ @Eq (Int, a)@
>          | EqualP Type Type      -- ^ @F a ~ Bool@ WTF is that
>          deriving( Show, Eq, Data, Typeable )

> data Type =
>          | VarT Name                     -- ^ @a@
>          | ConT Name Type                -- ^ @T@
>          | TupleT Int [Type]             -- ^ @(,), (,,), etc.@
>          | ArrowT Type Type              -- ^ @->@
>          | ListT Type                    -- ^ @[]@
>          | AppT Type Type                -- ^ @T a b@
>       -- | SigT Type Kind                -- ^ @t :: k@
>      deriving( Show, Eq, Data, Typeable )

> hs :: Token.TokenParser Token.st
> hs = Token.haskell

> typeParser :: Parser FullSig
> typeParser = whiteSpace >> fullSig

> fullSig :: Parser FullSig
> fullSig = 
>   do f <- Token.identifier
>      reservedOp "::"
>      s <- sig
>      FSig f s

> sig :: Parser Sig
> sig = 
>   do c <- cxt
>      reservedOp "=>"
>      t <- ty

> cxt :: Parser Cxt
>   do return ()

> ty :: Parser Ty
>   do 
>     
